datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

model fileUrls {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  messageId      String   @db.ObjectId
  conversationId String?  @db.ObjectId
  groupdId       String?  @db.ObjectId
  channelId      String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  firebaseUserId      String               @unique @map("firebase_user_id")
  phone               String               @unique
  email               String?              @unique
  dateOfBirth         DateTime?            @map("date_of_birth")
  userName            String?              @map("user_name")
  dob                 DateTime?
  profilePictureUrl   String?              @map("profile_picture_url")
  lastActiveAt        DateTime?            @map("last_active_at")
  fcm                 Json                 @default("[]")
  sentMessages        Message[]            @relation("SentMessages")
  conversationMembers ConversationMember[]
  adminChannels       Channel[]            @relation("AdminChannels")
  superAdminChannels  Channel[]            @relation("SuperAdminChannels")
  CreatedChannels     Channel[]            @relation("CreatedChannels")
  channelMembers      ChannelMember[]
  groupMembers        GroupMember[]
  CreatedGroups       Group[]              @relation("CreatedGroups")
  GroupAdmin          Group[]              @relation("GroupAdmin")
  contacts            Contact[]            @relation("UserContacts")
  addedContacts       Contact[]            @relation("AddedContacts")
  pinnedItems         PinnedItem[]
  comments            Comment[]
  blockedUserIds      String[]             @db.ObjectId
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@map("users")
}

model Conversation {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  members      ConversationMember[]
  messages     Message[]
  lastMessage  LastMessage?
  pinnedItems  PinnedItem[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  lastActivity DateTime             @default(now())

  @@map("conversations")
}

model ConversationMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
  @@map("conversation_members")
}

model Group {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  isPublic          Boolean       @default(false) // Whether the group is open to anyone
  profilePictureUrl String?       @map("profile_picture_url")
  pinnedItems       PinnedItem[]
  messages          Message[]
  lastMessage       LastMessage?
  createdBy         User          @relation("CreatedGroups", fields: [createdById], references: [id])
  createdById       String        @db.ObjectId
  admin             User          @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId           String        @db.ObjectId
  members           GroupMember[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastActivity      DateTime      @default(now())

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String   @db.ObjectId
  joinedAt DateTime @default(now())

  @@unique([userId, groupId]) // Unique constraint on userId and groupId
  @@map("group_members")
}

enum MessageStatus {
  SENT
  READ
}

type SeenStatus {
  status      MessageStatus @default(SENT)
  seenUserIds String[]      @db.ObjectId
}

enum MessageType {
  STANDARD
  CHANNEL_INVITATION
  FORWARD
  REPLY
}

type References {
  channelId          String?
  channelName        String?
  imageUrl           String?
  originalMessageId  String?
  originalSenderId   String?
  fromConversationId String?
  fromChannelId      String?
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String        @db.ObjectId
  content        String
  photoUrl       String[]
  fileUrls       String[]
  comments       Comment[]
  status         SeenStatus
  references     References?
  messageType    MessageType   @default(STANDARD)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId
  channel        Channel?      @relation(fields: [channelId], references: [id])
  channelId      String?       @db.ObjectId
  group          Group?        @relation(fields: [groupId], references: [id])
  groupId        String?       @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("messages")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  message     Message  @relation(fields: [messageId], references: [id])
  messageId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("comments")
}

model Channel {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  isPublic          Boolean         @default(true)
  profilePictureUrl String?         @map("profile_picture_url")
  pinnedItems       PinnedItem[]
  messages          Message[]
  lastMessage       LastMessage?
  isCommentAllowed  Boolean         @default(false)
  createdBy         User            @relation("CreatedChannels", fields: [createdById], references: [id])
  createdById       String          @db.ObjectId
  superAdmin        User            @relation("SuperAdminChannels", fields: [superAdminId], references: [id])
  superAdminId      String          @db.ObjectId
  admin             User            @relation("AdminChannels", fields: [adminIds], references: [id])
  adminIds          String[]        @db.ObjectId
  members           ChannelMember[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  lastActivity      DateTime        @default(now())

  @@map("channels")
}

model ChannelMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String   @db.ObjectId
  joinedAt  DateTime @default(now())

  @@unique([userId, channelId])
  @@map("channel_members")
}

model Contact {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // displayName String?
  user   User   @relation("UserContacts", fields: [userId], references: [id])
  userId String @db.ObjectId

  contact   User     @relation("AddedContacts", fields: [contactId], references: [id])
  contactId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, contactId])
  @@map("contacts")
}

model PinnedItem {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @db.ObjectId
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId
  group          Group?        @relation(fields: [groupId], references: [id])
  groupId        String?       @db.ObjectId
  channel        Channel?      @relation(fields: [channelId], references: [id])
  channelId      String?       @db.ObjectId
  pinnedAt       DateTime      @default(now())

  @@unique([userId, conversationId, groupId, channelId])
  @@index([userId, conversationId], name: "user_conversation_unique_idx")
  @@index([userId, groupId], name: "user_group_unique_idx")
  @@index([userId, channelId], name: "user_channel_unique_idx")
  @@map("pinned_items")
}

type LastMessage {
  content   String
  senderId  String   @db.ObjectId
  createdAt DateTime
}
